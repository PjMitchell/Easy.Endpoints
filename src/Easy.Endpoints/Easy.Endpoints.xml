<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Easy.Endpoints</name>
    </assembly>
    <members>
        <member name="T:Easy.Endpoints.DeleteAttribute">
            <summary>
            Defines endpoint with DELETE HttpMethod and optional route information
            </summary>
        </member>
        <member name="M:Easy.Endpoints.DeleteAttribute.#ctor">
            <summary>
            Creates new instance without route template
            </summary>
        </member>
        <member name="M:Easy.Endpoints.DeleteAttribute.#ctor(System.String)">
            <summary>
            Creates new instance with route template
            </summary>
            <param name="template">Route template</param>
        </member>
        <member name="T:Easy.Endpoints.EndpointControllerAttribute">
            <summary>
            Defines Controller Route Value for an endpoint, useful for grouping endpoints
            </summary>
        </member>
        <member name="M:Easy.Endpoints.EndpointControllerAttribute.#ctor(System.String)">
            <summary>
            Creates new instance of EndpointControllerAttribute
            </summary>
            <param name="name">Name of controller</param>
        </member>
        <member name="P:Easy.Endpoints.EndpointControllerAttribute.Name">
            <summary>
            Name of controller
            </summary>
        </member>
        <member name="T:Easy.Endpoints.EndpointMethodAttribute">
            <summary>
            Defines endpoint HttpMethod and optional route information
            </summary>
        </member>
        <member name="M:Easy.Endpoints.EndpointMethodAttribute.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates new instance with httpMethods
            </summary>
            <param name="httpMethods">Desired Http methods</param>
        </member>
        <member name="M:Easy.Endpoints.EndpointMethodAttribute.#ctor(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Creates new instance with httpMethods and route template
            </summary>
            <param name="httpMethods">Desired Http methods</param>
            <param name="template">Route template</param>
        </member>
        <member name="P:Easy.Endpoints.EndpointMethodAttribute.HttpMethods">
            <summary>
            Http methods for Endpoint
            </summary>
        </member>
        <member name="P:Easy.Endpoints.EndpointMethodAttribute.Template">
            <inheritdoc cref="P:Microsoft.AspNetCore.Mvc.Routing.IRouteTemplateProvider.Template"/>
        </member>
        <member name="P:Easy.Endpoints.EndpointMethodAttribute.Order">
            <inheritdoc cref="P:Microsoft.AspNetCore.Mvc.Routing.IRouteTemplateProvider.Order"/>
        </member>
        <member name="P:Easy.Endpoints.EndpointMethodAttribute.Name">
            <inheritdoc cref="P:Microsoft.AspNetCore.Mvc.Routing.IRouteTemplateProvider.Name"/>
        </member>
        <member name="T:Easy.Endpoints.GenericParameterDiscoveryAttribute">
            <summary>
            Declares Generic Parameter Type information for a generic endpoint
            </summary>
        </member>
        <member name="M:Easy.Endpoints.GenericParameterDiscoveryAttribute.GetGenericEndpointTypeInfo">
            <inheritdoc cref="M:Easy.Endpoints.IGenericEndpointTypeInfoProvider.GetGenericEndpointTypeInfo"/>
        </member>
        <member name="M:Easy.Endpoints.GenericParameterDiscoveryAttribute.GetTypes">
            <summary>
            Gets All Generic Type Parameters to use
            </summary>
            <returns>All Generic Type Parameters to use</returns>
        </member>
        <member name="M:Easy.Endpoints.GenericParameterDiscoveryAttribute.GetRouteVaulesForGenericParameter(System.Type[])">
            <summary>
            GetRouteVaulesForGenericParameter defaults to a single EndpointRouteValueMetadata with key: 'type' and value: type[o].Name
            </summary>
            <param name="types">Generic Type parameters</param>
            <returns>EndpointRouteValueMetadata values for generic type parameters</returns>
        </member>
        <member name="T:Easy.Endpoints.GetAttribute">
            <summary>
            Defines endpoint with GET HttpMethod and optional route information
            </summary>
        </member>
        <member name="M:Easy.Endpoints.GetAttribute.#ctor">
            <summary>
            Creates new instance without route template
            </summary>
        </member>
        <member name="M:Easy.Endpoints.GetAttribute.#ctor(System.String)">
            <summary>
            Creates new instance with route template
            </summary>
            <param name="template">Route template</param>
        </member>
        <member name="T:Easy.Endpoints.KnownTypesAttribute">
            <summary>
            Declares known type parameters for a generic endpoint
            </summary>
        </member>
        <member name="M:Easy.Endpoints.KnownTypesAttribute.#ctor(System.String,System.Type[])">
            <summary>
            Creates new instance of KnownTypesAttribute for type and defined type name
            </summary>
            <param name="name">Name to be given to route value 'type'</param>
            <param name="typeParameters">Type Parameters for the endpoint</param>
        </member>
        <member name="M:Easy.Endpoints.KnownTypesAttribute.#ctor(System.Type[])">
            <summary>
            Creates new instance of KnownTypesAttribute for type and define type route parameter value as the first types name
            </summary>
            <param name="typeParameters">Type Parameters for the endpoint</param>
        </member>
        <member name="P:Easy.Endpoints.KnownTypesAttribute.Name">
            <summary>
            Type name, used to provide 'type' route parameter
            </summary>
        </member>
        <member name="P:Easy.Endpoints.KnownTypesAttribute.TypeParameters">
            <summary>
            Type parameter for generic endpoint
            </summary>
        </member>
        <member name="M:Easy.Endpoints.KnownTypesAttribute.GetEnumerator">
            <summary>
            Gets all EndpointRouteValueMetaData for Generic type parameter
            </summary>
            <returns>All endpoint RouteValueMetaData for Generic type parameter</returns>
        </member>
        <member name="T:Easy.Endpoints.PatchAttribute">
            <summary>
            Defines endpoint with PATCH HttpMethod and optional route information
            </summary>
        </member>
        <member name="M:Easy.Endpoints.PatchAttribute.#ctor">
            <summary>
            Creates new instance without route template
            </summary>
        </member>
        <member name="M:Easy.Endpoints.PatchAttribute.#ctor(System.String)">
            <summary>
            Creates new instance with route template
            </summary>
            <param name="template">Route template</param>
        </member>
        <member name="T:Easy.Endpoints.PostAttribute">
            <summary>
            Defines endpoint with POST HttpMethod and optional route information
            </summary>
        </member>
        <member name="M:Easy.Endpoints.PostAttribute.#ctor">
            <summary>
            Creates new instance without route template
            </summary>
        </member>
        <member name="M:Easy.Endpoints.PostAttribute.#ctor(System.String)">
            <summary>
            Creates new instance with route template
            </summary>
            <param name="template">Route template</param>
        </member>
        <member name="T:Easy.Endpoints.PutAttribute">
            <summary>
            Defines endpoint with PUT HttpMethod and optional route information
            </summary>
        </member>
        <member name="M:Easy.Endpoints.PutAttribute.#ctor">
            <summary>
            Creates new instance without route template
            </summary>
        </member>
        <member name="M:Easy.Endpoints.PutAttribute.#ctor(System.String)">
            <summary>
            Creates new instance with route template
            </summary>
            <param name="template">Route template</param>
        </member>
        <member name="T:Easy.Endpoints.SingleGenericParameterDiscoveryAttribute">
            <summary>
            Declares Generic Type information when there is only a single generic type parameter
            </summary>
        </member>
        <member name="M:Easy.Endpoints.SingleGenericParameterDiscoveryAttribute.GetGenericEndpointTypeInfo">
            <inheritdoc cref="M:Easy.Endpoints.IGenericEndpointTypeInfoProvider.GetGenericEndpointTypeInfo"/>
        </member>
        <member name="M:Easy.Endpoints.SingleGenericParameterDiscoveryAttribute.GetTypes">
            <summary>
            Gets All Generic Type Parameters to use
            </summary>
            <returns>All Generic Type Parameters to use</returns>
        </member>
        <member name="M:Easy.Endpoints.SingleGenericParameterDiscoveryAttribute.GetRouteVaulesForGenericParameter(System.Type)">
            <summary>
            GetRouteVaulesForGenericParameter defaults to a single EndpointRouteValueMetadata with key: 'type' and value: type.Name
            </summary>
            <param name="type">Generic Type Parameter</param>
            <returns>EndpointRouteValueMetadata values for Type</returns>
        </member>
        <member name="T:Easy.Endpoints.EndpointRouteBuilderExtensions">
            <summary>
            Adds Easy.Endpoints routes to EndpointRouteBuilder
            </summary>
        </member>
        <member name="M:Easy.Endpoints.EndpointRouteBuilderExtensions.AddEasyEndpoints(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder)">
            <summary>
            Adds Easy.Endpoints routes to EndpointRouteBuilder
            </summary>
            <param name="endpoints">Microsoft.AspNetCore.Routing.IEndpointRouteBuilder to add Easy.Endpoints to</param>
            <returns>Returns Microsoft.AspNetCore.Builder.IEndpointConventionBuilder for endpoints</returns>
        </member>
        <member name="T:Easy.Endpoints.EndpointServiceCollectionExtensions">
            <summary>
            Easy.Endpoints Extensions for IServiceCollection
            </summary>
        </member>
        <member name="M:Easy.Endpoints.EndpointServiceCollectionExtensions.AddRequestEndpoints(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds Request endpoints with default options and all Endpoints from calling assembly
            </summary>
            <param name="services">The Microsoft.Extensions.DependencyInjection.IServiceCollection to add services to.</param>
        </member>
        <member name="M:Easy.Endpoints.EndpointServiceCollectionExtensions.AddRequestEndpoints(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Easy.Endpoints.EndpointOptionBuilders})">
            <summary>
            Adds Request endpoints with default options and all Endpoints from calling assembly
            </summary>
            <param name="services">The Microsoft.Extensions.DependencyInjection.IServiceCollection to add services to.</param>
            <param name="optionBuilderActions">Declaration of how to build the endpoint options</param>
        </member>
        <member name="M:Easy.Endpoints.EndpointServiceCollectionExtensions.AddRequestEndpoints(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Easy.Endpoints.EndpointManifestBuilder})">
            <summary>
            Adds Request endpoints
            </summary>
            <param name="services">The Microsoft.Extensions.DependencyInjection.IServiceCollection to add services to.</param>
            <param name="manifestBuilderActions">Declaration of how to build the endpoint manifest</param>
        </member>
        <member name="M:Easy.Endpoints.EndpointServiceCollectionExtensions.AddRequestEndpoints(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Easy.Endpoints.EndpointOptionBuilders},System.Action{Easy.Endpoints.EndpointManifestBuilder})">
            <summary>
            Adds Request endpoints
            </summary>
            <param name="services">The Microsoft.Extensions.DependencyInjection.IServiceCollection to add services to.</param>
            <param name="optionBuilderActions">Declaration of how to build the endpoint options</param>
            <param name="manifestBuilderActions">Declaration of how to build the endpoint manifest</param>
        </member>
        <member name="T:Easy.Endpoints.IJsonBodyEndpointHandler`1">
            <summary>
            A handler that processes a json body and will return a 201 response
            </summary>
            <typeparam name="TBody">Type of Json Body</typeparam>
        </member>
        <member name="M:Easy.Endpoints.IJsonBodyEndpointHandler`1.Handle(`0,System.Threading.CancellationToken)">
            <summary>
            Processes body
            </summary>
            <param name="body">Request body to be handled</param>
            <param name="cancellationToken">Request Aborted</param>
            <returns>A Task</returns>
        </member>
        <member name="T:Easy.Endpoints.IJsonEndpointHandler`2">
            <summary>
            A handler that processes a json body and returns a new object
            </summary>
            <typeparam name="TBody">Type of Json Body</typeparam>
            <typeparam name="TResponse">Type of Json Response</typeparam>
        </member>
        <member name="M:Easy.Endpoints.IJsonEndpointHandler`2.Handle(`0,System.Threading.CancellationToken)">
            <summary>
            Processes json body and returns a new object
            </summary>
            <param name="body">Request body to be handled</param>
            <param name="cancellationToken">Request Aborted</param>
            <returns>Handled Response object</returns>
        </member>
        <member name="T:Easy.Endpoints.IJsonResponseEndpointHandler`1">
            <summary>
            A handler that returns a new object
            </summary>
            <typeparam name="TResponse">Type of Json Response</typeparam>
        </member>
        <member name="M:Easy.Endpoints.IJsonResponseEndpointHandler`1.Handle(System.Threading.CancellationToken)">
            <summary>
            Handles a response and returns a new object
            </summary>
            <param name="cancellationToken">Request Aborted</param>
            <returns>Handled Response object</returns>
        </member>
        <member name="T:Easy.Endpoints.IEndpoint">
            <summary>
            Endpoint for use with Easy.Endpoint
            </summary>
        </member>
        <member name="M:Easy.Endpoints.IEndpoint.HandleRequest(Easy.Endpoints.EndpointContext)">
            <summary>
            Handles the Http Request
            </summary>
            <param name="httpContext">Context of the request</param>
            <returns>A task for the operation</returns>
        </member>
        <member name="T:Easy.Endpoints.IEndpointHandler">
            <summary>
            An endpoint handler that has a corresponding IEndpoint that uses the IEndpointHandler to handle the request.
            These can be flagged with the same Attributes as IEndpoints to provide endpoint information 
            </summary>
        </member>
        <member name="T:Easy.Endpoints.IJsonBody`1">
            <summary>
            Tags an IEndpointHandler to show that it expects a JSON body
            </summary>
            <typeparam name="TApiBody">Model for the JSON Body</typeparam>
        </member>
        <member name="T:Easy.Endpoints.IJsonResponse`1">
            <summary>
            Tags an IEndpointHandler to show that it expects to return a JSON response
            </summary>
            <typeparam name="TApiResponse">Model of the response body</typeparam>
        </member>
        <member name="T:Easy.Endpoints.INoContentResponse">
            <summary>
            Tags an IEndpointHandler to show that it expects to return a No Content Response
            </summary>
        </member>
        <member name="T:Easy.Endpoints.EndpointStatusCodeResponseException">
            <summary>
            This exception represents an error that will be translated to a status code with message by Easy.Endpoints
            </summary>
        </member>
        <member name="M:Easy.Endpoints.EndpointStatusCodeResponseException.#ctor">
            <summary>
            Simple 400 Bad Request
            </summary>
        </member>
        <member name="M:Easy.Endpoints.EndpointStatusCodeResponseException.#ctor(System.Int32,System.String)">
            <summary>
            Exception with status code and message
            </summary>
            <param name="statusCode">Status for Endpoint response</param>
            <param name="message">Message for Endpoint body</param>
        </member>
        <member name="M:Easy.Endpoints.EndpointStatusCodeResponseException.#ctor(System.Int32,System.String,System.Exception)">
            <summary>
            Exception with status code and message
            </summary>
            <param name="statusCode">Status for Endpoint response</param>
            <param name="message">Message for Endpoint body</param>
            <param name="innerException">Inner exception</param>
        </member>
        <member name="M:Easy.Endpoints.EndpointStatusCodeResponseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates new instance of InvalidEndpointSetupException with serialization data
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="P:Easy.Endpoints.EndpointStatusCodeResponseException.StatusCode">
            <summary>
            Status Code for Endpoint response
            </summary>
        </member>
        <member name="T:Easy.Endpoints.InvalidEndpointSetupException">
            <summary>
            This exception represents an error in the setup of easy endpoint
            </summary>
        </member>
        <member name="M:Easy.Endpoints.InvalidEndpointSetupException.#ctor(System.String)">
            <summary>
            Creates new instance of InvalidEndpointSetupException with message
            </summary>
            <param name="message">Error message</param>
        </member>
        <member name="M:Easy.Endpoints.InvalidEndpointSetupException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates new instance of InvalidEndpointSetupException with serialization data
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Easy.Endpoints.EndpointFromAssemblyExtensions">
            <summary>
            EndpointManifestBuilder for adding endpoints from an assembly
            </summary>
        </member>
        <member name="M:Easy.Endpoints.EndpointFromAssemblyExtensions.AddFromAssembly(Easy.Endpoints.EndpointManifestBuilder,System.Reflection.Assembly)">
            <summary>
            Adds all endpoints from a assembly to the manifest
            </summary>
            <param name="builder">The current instance of the manifest builder</param>
            <param name="assembly">Assembly to search for endpoints</param>
            <returns>Same instance of the manifest builder</returns>
        </member>
        <member name="T:Easy.Endpoints.EndpointManifestBuilder">
            <summary>
            Builds Endpoint manifest
            </summary>
        </member>
        <member name="P:Easy.Endpoints.EndpointManifestBuilder.Options">
            <summary>
            Option for endpoints
            </summary>
        </member>
        <member name="M:Easy.Endpoints.EndpointManifestBuilder.#ctor(Easy.Endpoints.EndpointOptions)">
            <summary>
            Constructs new instance of EndpointManifestBuilder 
            </summary>
            <param name="options">EndpointOptions options for endpoints</param>
        </member>
        <member name="M:Easy.Endpoints.EndpointManifestBuilder.AddEndpoint(Easy.Endpoints.EndpointInfo)">
            <summary>
            Adds a new endpoint to the manifest
            </summary>
            <param name="endpoint">Endpoint to be added to manifest</param>
        </member>
        <member name="M:Easy.Endpoints.EndpointManifestBuilder.Build">
            <summary>
            Builds Endpoint manifest
            </summary>
            <returns>New Endpoint manifest</returns>
        </member>
        <member name="T:Easy.Endpoints.EndpointManifestBuilderExtensions">
            <summary>
            Extensions to the manifest builder to aid with adding endpoints
            </summary>
        </member>
        <member name="M:Easy.Endpoints.EndpointManifestBuilderExtensions.AddForEndpoint``1(Easy.Endpoints.EndpointManifestBuilder)">
            <summary>
            Add Endpoints For Implementation of IEndpoint;
            </summary>
            <typeparam name="TEndpoint">Type of IEndpoint to be added</typeparam>
            <param name="builder">The current instance of the manifest builder</param>
            <returns>Same instance of the manifest builder</returns>
        </member>
        <member name="M:Easy.Endpoints.EndpointManifestBuilderExtensions.AddForEndpoint(Easy.Endpoints.EndpointManifestBuilder,System.Type)">
            <summary>
            Add Endpoints For Implementation of IEndpoint;
            </summary>
            <param name="builder">The current instance of the manifest builder</param>
            <param name="endpoint">Type of IEndpoint to be added</param>
            <returns>Same instance of the manifest builder</returns>
        </member>
        <member name="M:Easy.Endpoints.EndpointManifestBuilderExtensions.AddForEndpoint(Easy.Endpoints.EndpointManifestBuilder,System.Reflection.TypeInfo)">
            <summary>
            Add Endpoints For Implementation of IEndpoint;
            </summary>
            <param name="builder">The current instance of the manifest builder</param>
            <param name="endpoint">TypeInfo of IEndpoint to be added</param>
            <returns>Same instance of the manifest builder</returns>
        </member>
        <member name="M:Easy.Endpoints.EndpointManifestBuilderExtensions.AddForEndpointHandler``1(Easy.Endpoints.EndpointManifestBuilder)">
            <summary>
            Add Endpoints For Implementation of IEndpointHandler;
            </summary>
            <typeparam name="TendpointHandler">Type of IEndpointHandler to be added</typeparam>
            <param name="builder">The current instance of the manifest builder</param>
            <returns>Same instance of the manifest builder</returns>
        </member>
        <member name="M:Easy.Endpoints.EndpointManifestBuilderExtensions.AddForEndpointHandler(Easy.Endpoints.EndpointManifestBuilder,System.Type)">
            <summary>
            Add Endpoints For Implementation of IEndpointHandler;
            </summary>
            <param name="builder">The current instance of the manifest builder</param>
            <param name="handler">Type of IEndpointHandler to be added</param>
            <returns>Same instance of the manifest builder</returns>
        </member>
        <member name="M:Easy.Endpoints.EndpointManifestBuilderExtensions.AddForEndpointHandler(Easy.Endpoints.EndpointManifestBuilder,System.Reflection.TypeInfo)">
            <summary>
            Add Endpoints For Implementation of IEndpointHandler;
            </summary>
            <param name="builder">The current instance of the manifest builder</param>
            <param name="handler">TypeInfo of IEndpointHandler to be added</param>
            <returns>Same instance of the manifest builder</returns>
        </member>
        <member name="T:Easy.Endpoints.IEndpointForHandlerDeclaration">
            <summary>
            Gets Endpoint type for EndpointHandler Type
            </summary>
        </member>
        <member name="M:Easy.Endpoints.IEndpointForHandlerDeclaration.GetEndpointForHandler(System.Reflection.TypeInfo)">
            <summary>
            Gets Endpoint type for EndpointHandler Type
            </summary>
            <param name="handlerTypeInfo">EndpointHandler TypeInfo</param>
            <returns>Endpoint type for EndpointHandler Type, returns null if no valid endpoint found</returns>
        </member>
        <member name="T:Easy.Endpoints.JsonEndpointForHandlerDeclarations">
            <summary>
            Endpoints for JsonEndpointHandlers
            </summary>
        </member>
        <member name="M:Easy.Endpoints.JsonEndpointForHandlerDeclarations.GetEndpointForHandler(System.Reflection.TypeInfo)">
            <inheritdoc cref="M:Easy.Endpoints.IEndpointForHandlerDeclaration.GetEndpointForHandler(System.Reflection.TypeInfo)"/>
        </member>
        <member name="T:Easy.Endpoints.EndpointInfo">
            <summary>
            Information about a Easy.Endpoint
            </summary>
        </member>
        <member name="M:Easy.Endpoints.EndpointInfo.#ctor(System.Type,System.Type,Microsoft.AspNetCore.Routing.Patterns.RoutePattern,System.String,System.Int32)">
            <summary>
            Constructs new instance of EnpointInfo
            </summary>
            <param name="type">Type of IEndpoint</param>
            <param name="handler">Type of IEndpointHandler if being used by endpoint</param>
            <param name="pattern">Route pattern of endpoint</param>
            <param name="name">Route Name</param>
            <param name="order">Route order.</param>
        </member>
        <member name="P:Easy.Endpoints.EndpointInfo.Type">
            <summary>
            Gets Type of IEndpoint
            </summary>
        </member>
        <member name="P:Easy.Endpoints.EndpointInfo.Handler">
            <summary>
            Gets Type of IEndpointHandler if being used by endpoint
            </summary>
        </member>
        <member name="P:Easy.Endpoints.EndpointInfo.Pattern">
            <summary>
            Gets route pattern of endpoint
            </summary>
        </member>
        <member name="P:Easy.Endpoints.EndpointInfo.Name">
            <summary>
            Gets Route Name
            </summary>
        </member>
        <member name="P:Easy.Endpoints.EndpointInfo.Order">
            <summary>
            Gets Route order
            </summary>
        </member>
        <member name="P:Easy.Endpoints.EndpointInfo.Meta">
            <summary>
            Gets Meta data for endpoint
            </summary>
        </member>
        <member name="T:Easy.Endpoints.IEndpointManifest">
            <summary>
            A manifest of all Endpoints
            </summary>
        </member>
        <member name="T:Easy.Endpoints.EndpointResponseMetaData">
            <summary>
            Returns Response Type and code meta data for endpoint 
            </summary>
        </member>
        <member name="M:Easy.Endpoints.EndpointResponseMetaData.#ctor(System.Int32,System.Type,System.String[])">
            <summary>
            Constructs new instance of EndpointResponseMetaData
            </summary>
            <param name="statusCode">Status Code of response</param>
            <param name="responseType">Model type of response</param>
            <param name="responseTypes">Media Type of response</param>
        </member>
        <member name="P:Easy.Endpoints.EndpointResponseMetaData.Type">
            <summary>
            Gets Model type of response
            </summary>
        </member>
        <member name="P:Easy.Endpoints.EndpointResponseMetaData.StatusCode">
            <summary>
            Gets Status Code of response
            </summary>
        </member>
        <member name="M:Easy.Endpoints.EndpointResponseMetaData.SetContentTypes(Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection)">
            <summary>
            Applies MediaTypes to MediaTypeCollection
            </summary>
            <param name="contentTypes">MediaTypeCollection to be modified</param>
        </member>
        <member name="T:Easy.Endpoints.EndpointRouteKeys">
            <summary>
            Easy.Endpoints RouteKeys
            </summary>
        </member>
        <member name="F:Easy.Endpoints.EndpointRouteKeys.Controller">
            <summary>
            Controller Route Key, used for grouping Endpoints
            </summary>
        </member>
        <member name="F:Easy.Endpoints.EndpointRouteKeys.Endpoint">
            <summary>
            Endpoint Route Key, defines Endpoint Name
            </summary>
        </member>
        <member name="F:Easy.Endpoints.EndpointRouteKeys.Type">
            <summary>
            Type Route Key, used by generic endpoints to denote type
            </summary>
        </member>
        <member name="T:Easy.Endpoints.EndpointRouteValueMetadata">
            <summary>
            Providers Endpoint route values information
            </summary>
        </member>
        <member name="M:Easy.Endpoints.EndpointRouteValueMetadata.#ctor(System.String,System.String)">
            <summary>
            Creates new instance of EndpointRouteValueMetadata
            </summary>
            <param name="key">Key for route value</param>
            <param name="value">Value of route value</param>
        </member>
        <member name="P:Easy.Endpoints.EndpointRouteValueMetadata.Key">
            <inheritdoc cref="P:Easy.Endpoints.IEndpointRouteValueMetadataProvider.Key"/>
        </member>
        <member name="P:Easy.Endpoints.EndpointRouteValueMetadata.Value">
            <inheritdoc cref="P:Easy.Endpoints.IEndpointRouteValueMetadataProvider.Value"/>
        </member>
        <member name="T:Easy.Endpoints.GenericEndpointTypeInfo">
            <inheritdoc cref="T:Easy.Endpoints.IGenericEndpointTypeInfo"/>
        </member>
        <member name="M:Easy.Endpoints.GenericEndpointTypeInfo.#ctor(System.Type[],Easy.Endpoints.IEndpointRouteValueMetadataProvider[])">
            <summary>
            Creates new instance of GenericEndpointTypeInfo
            </summary>
            <param name="typeParameters">Type parameters</param>
            <param name="routeValues">Endpoint route values</param>
        </member>
        <member name="P:Easy.Endpoints.GenericEndpointTypeInfo.TypeParameters">
            <inheritdoc cref="P:Easy.Endpoints.IGenericEndpointTypeInfo.TypeParameters"/>
        </member>
        <member name="M:Easy.Endpoints.GenericEndpointTypeInfo.GetEnumerator">
            <summary>
            Gets Enumerator of IEndpointRouteValueMetadataProvider
            </summary>
            <returns>Enumerator of IEndpointRouteValueMetadataProvider</returns>
        </member>
        <member name="T:Easy.Endpoints.IEndpointRequestBodyMetadataProvider">
            <summary>
            MetaData used to declare Endpoint request body type
            </summary>
        </member>
        <member name="P:Easy.Endpoints.IEndpointRequestBodyMetadataProvider.Type">
            <summary>
            Model for Request Body
            </summary>
        </member>
        <member name="M:Easy.Endpoints.IEndpointRequestBodyMetadataProvider.SetContentTypes(Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection)">
            <summary>
            Applies MediaTypes to MediaTypeCollection
            </summary>
            <param name="contentTypes">MediaTypeCollection to be modified</param>
        </member>
        <member name="T:Easy.Endpoints.IEndpointRouteValueMetadataProvider">
            <summary>
            Providers Endpoint route values information
            </summary>
        </member>
        <member name="P:Easy.Endpoints.IEndpointRouteValueMetadataProvider.Key">
            <summary>
            Get Endpoint Route Key
            </summary>
        </member>
        <member name="P:Easy.Endpoints.IEndpointRouteValueMetadataProvider.Value">
            <summary>
            Gets Endpoint Route Value
            </summary>
        </member>
        <member name="T:Easy.Endpoints.IGenericEndpointTypeInfo">
            <summary>
            Gets Type info and route values for a generic endpoint
            </summary>
        </member>
        <member name="P:Easy.Endpoints.IGenericEndpointTypeInfo.TypeParameters">
            <summary>
            Type parameters of Generic endpoint
            </summary>
        </member>
        <member name="T:Easy.Endpoints.IGenericEndpointTypeInfoProvider">
            <summary>
            Returns GenericEndpointTypeInfo for an endpoint
            </summary>
        </member>
        <member name="M:Easy.Endpoints.IGenericEndpointTypeInfoProvider.GetGenericEndpointTypeInfo">
            <summary>
            Gets GenericEndpointTypeInfo
            </summary>
            <returns>All generic Endpoint type info for an endpoint</returns>
        </member>
        <member name="T:Easy.Endpoints.EndpointContext">
            <summary>
            Provides the context for an endpoint request
            </summary>
        </member>
        <member name="M:Easy.Endpoints.EndpointContext.#ctor(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Created a new instance of the Endpoint Context
            </summary>
            <param name="context">HttpContext for the request</param>
        </member>
        <member name="P:Easy.Endpoints.EndpointContext.HttpContext">
            <summary>
            HttpContext for the request
            </summary>
        </member>
        <member name="T:Easy.Endpoints.EndpointOptionBuilders">
            <summary>
            Route Pattern when none is specified, defaults "[endpoint]"
            </summary>
        </member>
        <member name="M:Easy.Endpoints.EndpointOptionBuilders.#ctor">
            <summary>
            Constructs new EndpointOptionBuilders
            </summary>
        </member>
        <member name="M:Easy.Endpoints.EndpointOptionBuilders.WithRoutePattern(System.String)">
            <summary>
            Defines Route Pattern when no route is defined for an endpoint
            </summary>
            <param name="routePattern">new route pattern for endpoint</param>
            <returns>Updated instance of the option builder</returns>
        </member>
        <member name="M:Easy.Endpoints.EndpointOptionBuilders.BuildOption">
            <summary>
            Build Endpoint option
            </summary>
            <returns>Option Endpoint for builder</returns>
        </member>
        <member name="T:Easy.Endpoints.EndpointOptions">
            <summary>
            Option for Endpoints
            </summary>
        </member>
        <member name="M:Easy.Endpoints.EndpointOptions.#ctor">
            <summary>
            Creates new instance of EndpointOptions with default values
            </summary>
        </member>
        <member name="P:Easy.Endpoints.EndpointOptions.RoutePattern">
            <summary>
            Route Pattern when none is specified, defaults "[endpoint]"
            </summary>
        </member>
        <member name="P:Easy.Endpoints.EndpointOptions.EndpointForHandlerDeclarations">
            <summary>
            All EndpointForHandlerDeclaration 
            </summary>
        </member>
        <member name="T:Easy.Endpoints.IEndpointContextAccessor">
            <summary>
            Gets Endpoint Context, accessor is scoped to the request
            </summary>
        </member>
        <member name="M:Easy.Endpoints.IEndpointContextAccessor.GetContext">
            <summary>
            Gets Context
            </summary>
            <returns>Returns context for request</returns>
        </member>
        <member name="T:Easy.Endpoints.IGuidIdRouteParser">
            <summary>
            Parses id part of route as int
            </summary>
        </member>
        <member name="M:Easy.Endpoints.IGuidIdRouteParser.GetIdFromRoute">
            <summary>
            Gets id part of route as an Guid
            </summary>
            <returns>id from route</returns>
            <exception cref="T:Easy.Endpoints.EndpointStatusCodeResponseException">With as Status code of 404 if cannot parse id</exception>
        </member>
        <member name="T:Easy.Endpoints.IIntIdRouteParser">
            <summary>
            Parses id part of route as int
            </summary>
        </member>
        <member name="M:Easy.Endpoints.IIntIdRouteParser.GetIdFromRoute">
            <summary>
            Gets id part of route as an int
            </summary>
            <returns>id from route</returns>
            <exception cref="T:Easy.Endpoints.EndpointStatusCodeResponseException">With as Status code of 404 if cannot parse id</exception>
        </member>
        <member name="T:Easy.Endpoints.IStringIdRouteParser">
            <summary>
            Parses id part of route as string
            </summary>
        </member>
        <member name="M:Easy.Endpoints.IStringIdRouteParser.GetIdFromRoute">
            <summary>
            Gets id part of route as a string
            </summary>
            <returns>id from route</returns>
            <exception cref="T:Easy.Endpoints.EndpointStatusCodeResponseException">With as Status code of 404 if cannot parse id</exception>
        </member>
    </members>
</doc>
